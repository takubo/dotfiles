# shebang
snippet sh
	#!/usr/bin/awk -f
# main()
snippet beg
	BEGIN {
		${1:#}
	}${2}
snippet end
	END {
		${1:#}
	}${2}

# Pattern - Axtion
snippet reg
	/${1:}/ {
		${2:#}
	}${3}
snippet pat
	${1:} {
		${2:#}
	}${3}
snippet act
	{
		${1:#}
	}${2}
#
# @include "..."
snippet inc
	@include "${1:`Filename("$1.h")`}"${2}
#
# if Condition
snippet if
	if (${1:condition}) {
		${2:#}
	}${3}
snippet elif
	else if (${1:condition}) {
		${2:#}
	}${3}
snippet ei
	else if (${1:condition}) {
		${2:#}
	}${3}
snippet else
	else {
		${1:#}
	}${2}
snippet el
	else {
		${1:#}
	}${2}
#
# switch statement
snippet sw
	switch (${1:word}) {
	case ${2:pattern}:
		${3:#}
		break;
	default:
		${4:# do Nothing.}
		break;
	}${5}
#
# Tertiary conditional
snippet t
	${1:condition} ? ${2:a} : ${3:b}${4}
#
# Do While Loop
snippet do
	do {
		${2:#}
	} while (${1:/* condition */});${3}
# While Loop
snippet wh
	while (${1:condition}) {
		${2:#}
	}${3}
#
# Custom For Loop
snippet forr
	for (${1:i} = ${2:0}; ${3:$1} ${4:<} ${5:NF}; ${6:$1++}) {
		${7:#}
	}${8}
## For Loop
#snippet forr
#	for (${1:i} = ${2:0}; $1 ${3:<} ${4:NF}; $1${5:++}) {
#		${4:# code}
#	}
## For Loop
##snippet forr
##	for (${1:i} = 0; $1 < ${2:NF}; $1${3:++}) {
##		${4:#}
##	}
# For Loop
snippet for
	for (${1:i} = ${2:0}; ${3:$1 < NF}; ${4:$1++}) {
		${5:#}
	}${6}
# For Loop default
snippet fori
	for (i = 0; i < ${1:NF}; i++) {
		${2:#}
	}${3}
snippet forj
	for (j = 0; j < ${1:NF}; j++) {
		${2:#}
	}${3}
snippet fork
	for (k = 0; k < ${1:NF}; k++) {
		${2:#}
	}${3}
snippet forx
	for (${1:x} = 0; $1 < ${2:NF}; $1++) {
		${3:#}
	}${4}
snippet fin
	for (${1:i} in ${2:array[]}) {
	}${3}
snippet fini
	for (i in ${1:array[]}) {
	}${2}
snippet finj
	for (j in ${1:array[]}) {
	}${2}
snippet fink
	for (k in ${1:array[]}) {
	}${2}
#
# Function
snippet fun
	function ${1:func_name}(${2})
	{
		${3:#}
	}${4}
#
# return ...
snippet ret
	return ${1:#retcode}${2}
#
# printf
# unfortunately version this isn't as nice as TextMates's, given the lack of a
# dynamic `...`
snippet pr
	print ${1:var}${2}
snippet fpr
	print ${1:var} ${2:>>} ${3:file}${4}
snippet prs
	print "${1:#####}"${2}
snippet fprs
	print "${1:#####}" ${2:>>} ${3:file}${4}
snippet prf
	printf "${1:%s}"${2}
snippet prfn
	printf "${1:%s}\n"${2}
snippet fprf
	printf "${1:%s}" ${2:>>} ${3:file}${4}
snippet fprfn
	printf "${1:%s}\n" ${2:>>} ${3:file}${4}
snippet sprf
	sprintf(${1:str}, "${2:%s}"${3})${4}
snippet sprfn
	sprintf(${1:str}, "${2:%s}\n"${3})${4}
snippet nr
	print ""
#
snippet sys
	system("${1}")${2}
#snippet slp
#	system("sleep ${1:1}")${2}
snippet slp
	"sleep ${1:1}" | getline dummy
#
snippet .
	[${1}]${2}
snippet ."
	["${1}"]${2}

# frequency used user defined functions
snippet max
	# max
	function max(a, b) { return (a > b) ? a : b }
snippet min
	# min
	function min(a, b) { return (a < b) ? a : b }
snippet abs
	# abs
	function abs(x) { return (x < 0) ? -x : x }
snippet d2r
	# deg2rad
	function d2r(deg) { return deg * pi / 180 }
snippet r2d
	# rad2deg
	function r2d(rad) { return rad * 180 / pi }
snippet rep
	# repeat text string
	function rep(str, num,     res) { while (num--) res = res str; return res }
# frequency used user variables
snippet pi
	pi = atan2(0, -1)
