#
#
# hello
snippet hello
	#include <stdio.h>
	#include <stdlib.h>

	int
	main(int argc, const char *argv[])
	{
		${1:}printf("hello, world\n");
		return EXIT_SUCCESS;
	}
#
#
# main()
snippet main
	#include <stdio.h>
	#include <stdlib.h>

	int
	main(int argc, const char *argv[])
	{
		${1}
		return 0;
	}
#
#
# #include <...>
snippet inc
	#include <${1:stdio}.h>
	${2}
#
#
# #include "..."
snippet ins
	#include "${1:filename}.h"
	${2}
#
#
# define ...
snippet df
	#define 
# #ifndef ... #define ... #endif
snippet def
	#ifndef $1
	#define ${1:SYMBOL}	${2:value}
	#endif${3}
snippet dd
	defined(${1:symbol})${2}
snippet ndd
	!defined(${1:symbol})${2}
snippet ifdef
	#ifdef ${1:FOO}
		${2:#define }
	#endif
snippet idf
	#ifdef ${1:FOO}
		${2:#define }
	#endif
snippet indf
	#ifndef ${1:FOO}
		${2:#define }
	#endif
snippet iif
	#if ${1:FOO}
		${2:#define }
	#endif
snippet iei
	#elif ${1:FOO}
		${2:#define }
	#endif
snippet ielif
	#elif ${1:FOO}
		${2:#define }
	#endif
snippet iel
	#else ${1:FOO}
		${2:#define }
	#endif
# Header Include-Guard
# (the randomizer code is taken directly from TextMate; it could probably be
# cleaner, I don't know how to do it in vim script)
snippet once
	#ifndef ${1:`toupper(Filename('', 'UNTITLED')) . '_H`}
	#define $1
#
	${2}
#
	#endif /* $1 */
#snippet once
#	#ifndef ${1:`toupper(Filename('', 'UNTITLED').'_'.system("/usr/bin/ruby -e 'print (rand * 2821109907455).round.to_s(36)'"))`}
#
#	#define $1
#
#	${2}
#
#	#endif /* end of include guard: $1 */

#
#
# if Condition
snippet if
	if (${1:/* condition */}) {
		${2:/* code */}
	}${3}
snippet elif
	else if (${1:/* condition */}) {
		${2:/* code */}
	}${3}
snippet ei
	else if (${1:/* condition */}) {
		${2:/* code */}
	}${3}
snippet else
	else {
		${1}
	}${2}
snippet el
	else {
		${1}
	}${2}
#
#
# switch statement
snippet sw
	switch (${1:word}) {
	case ${2:pattern}:
		${3:/* code */}
		break;
	${4}default:
		${5:/* do Nothing. */}
		break;
	}${6}
#
#
# Tertiary conditional
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
#
#
# Do While Loop
snippet do
	do {
		${2:/* code */}
	} while (${1:/* condition */});${3}
#
#
# While Loop
snippet wh
	while (${1:/* condition */}) {
		${2:/* code */}
	}${3}
#
#
# Custom For Loop
snippet forr
	for (${1:i} = ${2:0}; ${3:$1} ${4:<} ${5:NUM}; ${6:$1++}) {
		${7:/* code */}
	}${8}
## For Loop
#snippet forr
#	for (${2:i} = 0; $2 < ${1:count}; $2${3:++}) {
#		${4:/* code */}
#	}
# For Loop
snippet for
	for (${1:i} = ${2:0}; ${3:$1 < NUM}; ${4:$1++}) {
		${5:/* code */}
	}${6}
# For Loop default
snippet fori
	for (i = 0; i < ${1:NUM}; i++) {
		${2:/* code */}
	}${3}
snippet forj
	for (j = 0; j < ${1:NUM}; j++) {
		${2:/* code */}
	}${3}
snippet fork
	for (k = 0; k < ${1:NUM}; k++) {
		${2:/* code */}
	}${3}
snippet forx
	for (${1:x} = 0; $1 < ${2:NUM}; $1++) {
		${3:/* code */}
	}${4}
#
#
# Function
snippet fun
	${1:int} ${2:function_name}(${3:void})
	{
		${4:/* code */}
	}${5}
#
#
# Function Declaration
snippet fund
	${1:int} ${2:function_name}(${3:void});${4}
#
#
# return ...;
snippet ret
	return ${1:/*retcode*/};${2}
#
# printf
# unfortunately version this isn't as nice as TextMates's, given the lack of a
# dynamic `...`
snippet pt
	puts("#####${1:1}");${2}
snippet pr
	printf("${1:%s}\n"${2});${3}
snippet prf
	printf("${1:%s}"${2});${3}
snippet fpr
	fprintf(${1:stderr}, "${2:%s}\n"${3});${4}
snippet fprf
	fprintf(${1:stderr}, "${2:%s}"${3});${4}
snippet spr
	sprintf(${1:str}, "${2:%s}"${3});${4}
snippet sprf
	sprintf(${1:str}, "${2:%s}"${3});${4}
snippet nr
	printf("\n");${1}
#
snippet .
	[${1}]${2}
#
snippet vd
	void
snippet ch
	char
snippet sh
	short
snippet in
	int
snippet lo
	long
snippet ll
	long long
snippet fl
	float
snippet db
	double
snippet ld
	long double
#
snippet uch
	unsigned char
snippet ush
	unsigned short
snippet uin
	unsigned int
snippet ulo
	unsigned long
snippet ull
	unsigned long long
#
snippet vp
	void *
snippet cc
	const char *
#
snippet sz
	sizeof(${1:type or var})${2}
#
snippet br
	break;
snippet con
	continue;
snippet ca
	case ${1value}:${2}
snippet de
	default:
#
# const
snippet co
	const 
# static
snippet st
	static 
# unsigned
snippet un
	unsigned 
# unsigned
snippet vo
	volatile 
# extern
snippet ex
	extern 
# inline
snippet il
	inline 
#
# Typedef
snippet td
	typedef 
snippet tdf
	typedef ${1:int} ${2:MyCustomType}; ${3}
# Struct
snippet str
	struct ${1:`Filename('$1_t', 'name')`} {
		${2:/* data */}
	}${3: /* optional variable list */};${4}
# Union
snippet uni
	union ${1:`Filename('$1_t', 'name')`} {
		${2:/* data */}
	}${3: /* optional variable list */};${4}
# Enum
snippet enu
	enum {
		${1:/* data */}
	};${2}
# Typedef struct
snippet tds
	typedef struct ${2}${3:_$1} {
		${4:/* data */}
	} ${1:`Filename('$1_t', 'name')`};${5}
# Typedef union
snippet tdu
	typedef union ${2}${3:_$1} {
		${4:/* data */}
	} ${1:`Filename('$1_t', 'name')`};${5}
# Typdef enum
snippet tde
	typedef enum {
		${1:/* data */}
	} ${2:foo};${3}
#
#
# Comment
snippet cm
	/* ${1:comment} */${2}
snippet cs
	/* ${1}
snippet ce
	 */${1}
snippet cl
	// ${1}
#
#
# Text String Literal
snippet s
	"${1}"${2}
